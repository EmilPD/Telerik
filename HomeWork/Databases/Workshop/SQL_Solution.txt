01. Create table Cities with (CityId, Name)

CREATE TABLE Cities (
	CityId INT IDENTITY PRIMARY KEY,
	Name NVARCHAR(15)
)
GO

02. Insert into Cities all the Cities from Employees, Suppliers, Customers tables

INSERT INTO Cities
	SELECT DISTINCT City
		FROM Employees
UNION
	SELECT DISTINCT City
		FROM Customers
UNION
	SELECT DISTINCT City
		FROM Suppliers
	ORDER BY City

03. Add CityId into Employees, Suppliers, Customers tables which is Foreign Key to CityId in Cities

ALTER TABLE Employees 
	ADD CityId INT
	CONSTRAINT FK_Employees_Cities 
		FOREIGN KEY(CityId)
		REFERENCES Cities(CityId)
GO

ALTER TABLE Customers 
	ADD CityId INT
	CONSTRAINT FK_Customers_Cities 
		FOREIGN KEY(CityId)
		REFERENCES Cities(CityId)
GO

ALTER TABLE Suppliers 
	ADD CityId INT
	CONSTRAINT FK_Suppliers_Cities 
		FOREIGN KEY(CityId)
		REFERENCES Cities(CityId)
GO

04. Update Employees, Suppliers, Customers tables with CityId which is in the Cities table

UPDATE Employees
	SET CityId = (
		SELECT CityId FROM Cities
		WHERE Employees.City = Cities.Name
		)
GO

UPDATE Customers
	SET CityId = (
		SELECT CityId FROM Cities
		WHERE Customers.City = Cities.Name
		)
GO

UPDATE Suppliers
	SET CityId = (
		SELECT CityId FROM Cities
		WHERE Suppliers.City = Cities.Name
		)
GO

05. Make the column Name in Cities Unique

CREATE UNIQUE INDEX UK_Cities_Name
	ON Cities (Name)

06. Insert into Cities all the Cities from Orders

INSERT INTO Cities
	SELECT DISTINCT ShipCity
		FROM Orders
		WHERE ShipCity NOT IN (SELECT [Name] FROM Cities)

07. Add CityId column in Orders with Foreign Key to CityId in Cities

ALTER TABLE Orders 
	ADD CityId INT
	CONSTRAINT FK_Orders_Cities 
		FOREIGN KEY(CityId)
		REFERENCES Cities(CityId)
GO

08. Now rename that column to be ShipCityId to be consistent (use stored procedure :) )

EXEC sys.sp_rename 'Orders.CityId', 'ShipCityId'

09. Update ShipCityId in Orders table with values from Cities table

UPDATE Orders
	SET ShipCityId = (
		SELECT CityId FROM Cities
		WHERE Orders.ShipCity = Cities.Name
		)
GO

10. Drop column ShipCity from Orders

ALTER TABLE Orders
	DROP COLUMN ShipCity

11. Create table Countries with columns CountryId and Name (Unique)

CREATE TABLE Countries (
	[CountryId] INT IDENTITY PRIMARY KEY,
	[Name] NVARCHAR(15) UNIQUE
)

12. Add CountryId to Cities with Foreign Key to CountryId in Countries

ALTER TABLE Cities
	ADD CountryId INT
	CONSTRAINT FK_Cities_Countries
		FOREIGN KEY(CountryId)
		REFERENCES Countries(CountryId)

13. Insert all the Countries from Employees, Customers, Suppliers and Orders

INSERT INTO Countries
	SELECT DISTINCT Country
		FROM Employees
UNION
	SELECT DISTINCT Country
		FROM Customers
UNION
	SELECT DISTINCT Country
		FROM Suppliers
UNION
	SELECT DISTINCT ShipCountry
		FROM Orders

14. Update CountryId in Cities table with values from Countries table

UPDATE Cities
	SET Cities.CountryId = CitiesInCountries.CountryId
	FROM (
	(SELECT UnionCountries.CityId, UnionCountries.Country, Countries.CountryId 
		FROM 
			(SELECT Country, CityId 
				FROM Employees 
			UNION 
			SELECT Country, CityId 
				FROM Suppliers 
			UNION 
			SELECT Country, CityId 
				FROM Customers 
			UNION 
			SELECT ShipCountry, ShipCityId
				FROM Orders ) UnionCountries 
		JOIN Countries
			ON Countries.Name = UnionCountries.Country)
		) CitiesInCountries
	WHERE 
		Cities.CityId = CitiesInCountries.CityId

15. Drop column City and ShipCity from Employees, Suppliers, Customers and Orders tables

DROP INDEX Customers.City

ALTER TABLE Customers
DROP COLUMN City

ALTER TABLE Suppliers
DROP COLUMN City

ALTER TABLE Employees
DROP COLUMN City

16. Drop column Country and ShipCountry from Employees, Customers, Suppliers and Orders tables

ALTER TABLE Orders
DROP COLUMN ShipCountry

ALTER TABLE Customers
DROP COLUMN Country

ALTER TABLE Employees
DROP COLUMN Country

ALTER TABLE Suppliers
DROP COLUMN Country